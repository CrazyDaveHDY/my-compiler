# 
0 
# N 
0 1 
# N int 
0 1 4 
# N int ID 
0 1 4 7 
# N int ID M 
0 1 4 7 9 
# N int ID M A 
0 1 4 7 9 13 
# N int ID M A ( 
0 1 4 7 9 13 16 
# N int ID M A ( int 
0 1 4 7 9 13 16 22 
# N int ID M A ( int ID 
0 1 4 7 9 13 16 22 25 
# N int ID M A ( param 
0 1 4 7 9 13 16 21 
# N int ID M A ( param , 
0 1 4 7 9 13 16 21 24 
# N int ID M A ( param , int 
0 1 4 7 9 13 16 21 24 22 
# N int ID M A ( param , int ID 
0 1 4 7 9 13 16 21 24 22 25 
# N int ID M A ( param , param 
0 1 4 7 9 13 16 21 24 21 
# N int ID M A ( param , parameter_list 
0 1 4 7 9 13 16 21 24 28 
# N int ID M A ( parameter_list 
0 1 4 7 9 13 16 19 
# N int ID M A ( parameter 
0 1 4 7 9 13 16 18 
# N int ID M A ( parameter ) 
0 1 4 7 9 13 16 18 23 
# N int ID M A ( parameter ) { 
0 1 4 7 9 13 16 18 23 27 
# N int ID M A ( parameter ) { inner_declare 
0 1 4 7 9 13 16 18 23 27 29 
# N int ID M A ( parameter ) { inner_declare return 
0 1 4 7 9 13 16 18 23 27 29 39 
# N int ID M A ( parameter ) { inner_declare return ID 
0 1 4 7 9 13 16 18 23 27 29 39 54 
# N int ID M A ( parameter ) { inner_declare return factor 
0 1 4 7 9 13 16 18 23 27 29 39 51 
# N int ID M A ( parameter ) { inner_declare return factor * 
0 1 4 7 9 13 16 18 23 27 29 39 51 69 
# N int ID M A ( parameter ) { inner_declare return factor * ID 
0 1 4 7 9 13 16 18 23 27 29 39 51 69 54 
# N int ID M A ( parameter ) { inner_declare return factor * factor 
0 1 4 7 9 13 16 18 23 27 29 39 51 69 51 
# N int ID M A ( parameter ) { inner_declare return factor * item 
0 1 4 7 9 13 16 18 23 27 29 39 51 69 84 
# N int ID M A ( parameter ) { inner_declare return item 
0 1 4 7 9 13 16 18 23 27 29 39 50 
# N int ID M A ( parameter ) { inner_declare return add_expression 
0 1 4 7 9 13 16 18 23 27 29 39 49 
# N int ID M A ( parameter ) { inner_declare return expression 
0 1 4 7 9 13 16 18 23 27 29 39 48 
# N int ID M A ( parameter ) { inner_declare return expression ; 
0 1 4 7 9 13 16 18 23 27 29 39 48 60 
# N int ID M A ( parameter ) { inner_declare return_sentence 
0 1 4 7 9 13 16 18 23 27 29 36 
# N int ID M A ( parameter ) { inner_declare sentence 
0 1 4 7 9 13 16 18 23 27 29 33 
# N int ID M A ( parameter ) { inner_declare sentence_list 
0 1 4 7 9 13 16 18 23 27 29 32 
# N int ID M A ( parameter ) { inner_declare sentence_list } 
0 1 4 7 9 13 16 18 23 27 29 32 44 
# N int ID M A ( parameter ) sentence_block 
0 1 4 7 9 13 16 18 23 26 
# N int ID M A function_declare 
0 1 4 7 9 13 15 
# N declare 
0 1 3 
# N declare void 
0 1 3 5 
# N declare void ID 
0 1 3 5 8 
# N declare void ID M 
0 1 3 5 8 12 
# N declare void ID M A 
0 1 3 5 8 12 14 
# N declare void ID M A ( 
0 1 3 5 8 12 14 16 
# N declare void ID M A ( void 
0 1 3 5 8 12 14 16 20 
# N declare void ID M A ( parameter 
0 1 3 5 8 12 14 16 18 
# N declare void ID M A ( parameter ) 
0 1 3 5 8 12 14 16 18 23 
# N declare void ID M A ( parameter ) { 
0 1 3 5 8 12 14 16 18 23 27 
# N declare void ID M A ( parameter ) { inner_declare 
0 1 3 5 8 12 14 16 18 23 27 29 
# N declare void ID M A ( parameter ) { inner_declare ID 
0 1 3 5 8 12 14 16 18 23 27 29 38 
# N declare void ID M A ( parameter ) { inner_declare ID = 
0 1 3 5 8 12 14 16 18 23 27 29 38 46 
# N declare void ID M A ( parameter ) { inner_declare ID = NUM 
0 1 3 5 8 12 14 16 18 23 27 29 38 46 52 
# N declare void ID M A ( parameter ) { inner_declare ID = factor 
0 1 3 5 8 12 14 16 18 23 27 29 38 46 51 
# N declare void ID M A ( parameter ) { inner_declare ID = item 
0 1 3 5 8 12 14 16 18 23 27 29 38 46 50 
# N declare void ID M A ( parameter ) { inner_declare ID = add_expression 
0 1 3 5 8 12 14 16 18 23 27 29 38 46 49 
# N declare void ID M A ( parameter ) { inner_declare ID = expression 
0 1 3 5 8 12 14 16 18 23 27 29 38 46 59 
# N declare void ID M A ( parameter ) { inner_declare ID = expression ; 
0 1 3 5 8 12 14 16 18 23 27 29 38 46 59 75 
# N declare void ID M A ( parameter ) { inner_declare assign_sentence 
0 1 3 5 8 12 14 16 18 23 27 29 37 
# N declare void ID M A ( parameter ) { inner_declare sentence 
0 1 3 5 8 12 14 16 18 23 27 29 33 
# N declare void ID M A ( parameter ) { inner_declare sentence M 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID = 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 46 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID = NUM 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 46 52 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID = factor 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 46 51 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID = item 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 46 50 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID = add_expression 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 46 49 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID = expression 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 46 59 
# N declare void ID M A ( parameter ) { inner_declare sentence M ID = expression ; 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 38 46 59 75 
# N declare void ID M A ( parameter ) { inner_declare sentence M assign_sentence 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 37 
# N declare void ID M A ( parameter ) { inner_declare sentence M sentence 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 33 
# N declare void ID M A ( parameter ) { inner_declare sentence M sentence M 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 33 45 
# N declare void ID M A ( parameter ) { inner_declare sentence M sentence M while 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 33 45 40 
# N declare void ID M A ( parameter ) { inner_declare sentence M sentence M while M 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 33 45 40 55 
# N declare void ID M A ( parameter ) { inner_declare sentence M sentence M while M ( 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 33 45 40 55 73 
# N declare void ID M A ( parameter ) { inner_declare sentence M sentence M while M ( ID 
0 1 3 5 8 12 14 16 18 23 27 29 33 45 33 45 40 55 73 54 
